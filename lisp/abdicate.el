;;; abdicate.el --- LLM‑driven Emacs agent (Responses API) -*- lexical-binding: t; -*-
;; Author: Grant Jenks <grant@example.com>
;; Version: 0.3.0
;; Package‑Requires: ((emacs "28.1") (request "0.3.2") (json "1.5") (cl-lib "0.6"))
;; Keywords: tools, convenience, ai
;; URL: https://github.com/YOURUSER/emacs-abdicate
;;
;; “Abdicate” – because giving an *agent* the reins can feel like
;; surrendering your own.
;;
;; SECURITY WARNING: This package evaluates arbitrary Lisp generated by the
;; remote model.  Use only in disposable sessions and backed‑up projects.
;; ------------------------------------------------------------------------

(require 'request)
(require 'json)
(require 'subr-x)
(require 'cl-lib)

(defgroup abdicate nil "LLM‑driven editing helpers." :group 'external)

(defcustom abdicate-api-key (getenv "OPENAI_API_KEY")
  "OpenAI API key."
  :type 'string)

(defcustom abdicate-model "o3"
  "Model name for /v1/responses."
  :type 'string)

(defcustom abdicate-max-bytes 15000
  "Maximum bytes of buffer text included per window."
  :type 'integer)

(defcustom abdicate-auto-confirm nil
  "If non‑nil, evaluate model commands without prompting."
  :type 'boolean)

;; ------------------------------------------------------------------------
;; Debug helper
;; ------------------------------------------------------------------------

(defun abdicate--debug-response (resp)
  "Log HTTP STATUS and body from RESP (a request.el response)."
  (message "[abdicate] HTTP %s  %S"
           (request-response-status-code resp)
           (request-response-data   resp)))

;; ------------------------------------------------------------------------
;; Snapshot builders
;; ------------------------------------------------------------------------

(defun abdicate--window-block (win)
  "Return <window …> block for WIN."
  (with-current-buffer (window-buffer win)
    (let* ((buf  (buffer-name))
           (mode (symbol-name major-mode))
           (size (buffer-size))
           (max  abdicate-max-bytes)
           (trunc (> size max))
           (body (if trunc
                     (concat (buffer-substring-no-properties 1 max)
                             (format "\n…[truncated %d bytes]…" (- size max)))
                   (buffer-substring-no-properties 1 (1+ size)))))
      (format "<window name=\"%s\" mode=\"%s\" truncated=\"%s\">\n%s\n</window>"
              buf mode (if trunc "yes" "no") body))))

(defun abdicate--snapshot ()
  "Return pseudo‑XML snapshot of Emacs state."
  (let ((user (or (user-login-name) "unknown"))
        (cwd  default-directory)
        (time (format-time-string "%F %T")))
    (concat
     (format "<context>\n$USER = %s\n$CWD  = %s\n$TIME = %s\n</context>\n\n"
             user cwd time)
     (string-join
      (mapcar #'abdicate--window-block (window-list)) "\n\n"))))

;; ------------------------------------------------------------------------
;; Prompts
;; ------------------------------------------------------------------------

(defun abdicate--system-prompt ()
  "Instruction string sent as system message."
  "You are **Emacs‑Agent**.  You receive a USER goal and a pseudo‑XML \
snapshot of the current Emacs windows.  Reply ONLY with valid JSON:\n\
  { \"commands\": [ \"(elisp-form)\", … ], \"continue\": true|false }\n\
Each command is evaluated with `(eval)`. \
Use built‑in commands only.  Return `continue=false` when done.")

(defun abdicate--json (obj)
  (let ((json-encoding-pretty-print nil)) (json-encode obj)))

;; ------------------------------------------------------------------------
;; API call (Responses API, 2025)
;; ------------------------------------------------------------------------

(defun abdicate--query (goal snapshot)
  "POST GOAL + SNAPSHOT; return parsed assistant JSON."
  (let* ((input `[((type . "message") (role . "system")
                   (content . ,(abdicate--system-prompt)))
                  ((type . "message") (role . "user") (content . ,goal))
                  ((type . "message") (role . "user") (content . ,snapshot))])
         (payload (abdicate--json `((model . ,abdicate-model) (input . ,input))))
         (resp (request
                 "https://api.openai.com/v1/responses"
                 :type "POST" :data payload :parser #'json-read
                 :headers `(("Content-Type"  . "application/json")
                            ("Authorization" . ,(concat "Bearer " abdicate-api-key)))
                 :error #'abdicate--debug-response
                 :sync t)))
    (let* ((data  (request-response-data resp))
           (items (alist-get 'output data))
           (msg   (seq-find (lambda (it) (equal (alist-get 'type it) "message"))
                            (reverse items))))
      (unless msg (error "No assistant message in response"))
      (condition-case _
          (json-read-from-string (alist-get 'content msg))
        (json-error
         (error "Assistant content not JSON: %s" (alist-get 'content msg)))))))

;; ------------------------------------------------------------------------
;; Command execution
;; ------------------------------------------------------------------------

(defun abdicate--eval (cmd)
  "Read and eval CMD string."
  (let ((form (read cmd)))
    (when (or abdicate-auto-confirm
              (yes-or-no-p (format "Eval %S ? " form)))
      (condition-case err
          (progn (message "→ %S ⇒ %S" form (eval form)) t)
        (error (message "Command error: %S" err) nil)))))

;; ------------------------------------------------------------------------
;; Interactive entry point
;; ------------------------------------------------------------------------

;;;###autoload
(defun abdicate ()
  "Start an LLM‑driven editing loop."
  (interactive)
  (unless (stringp abdicate-api-key)
    (setq abdicate-api-key
          (read-string "OpenAI API key: " nil 'abdicate-key)))
  (let ((goal (string-trim (read-string "What should the agent do? "))))
    (unless (string-empty-p goal)
      (catch 'stop
        (while t
          (let* ((snapshot (abdicate--snapshot))
                 (reply    (abdicate--query goal snapshot))
                 (cmds     (alist-get 'commands reply))
                 (cont     (alist-get 'continue reply t)))
            (unless (listp cmds)
              (error "Assistant JSON missing commands"))
            (dolist (c cmds) (abdicate--eval c))
            (unless cont (throw 'stop nil))))))))

(provide 'abdicate)
;;; abdicate.el ends here
